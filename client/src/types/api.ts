/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * This interface was referenced by `Schema`'s JSON-Schema
 * via the `definition` "AuthSettingsRequest".
 */
export type AuthSettingsRequest =
  | {
      setting: "Color";
      color: {
        hue?: number;
        sat?: number;
      };
    }
  | {
      setting: "DiceType";
      dice_type: DiceType;
    }
  | {
      setting: "Pubkey";
      text: string;
    };
/**
 * This interface was referenced by `Schema`'s JSON-Schema
 * via the `definition` "DiceType".
 */
export type DiceType = "D6" | "D20";
/**
 * This interface was referenced by `Schema`'s JSON-Schema
 * via the `definition` "UserId".
 */
export type UserId =
  | {
      type: "User";
      id: string;
    }
  | {
      type: "Anonymous";
      id: string;
    };

export interface Schema {
  [k: string]: unknown;
}
/**
 * This interface was referenced by `Schema`'s JSON-Schema
 * via the `definition` "AuthRefreshTokenResponse".
 */
export interface AuthRefreshTokenResponse {
  access_token: string;
}
/**
 * This interface was referenced by `Schema`'s JSON-Schema
 * via the `definition` "AuthDonateResponse".
 */
export interface AuthDonateResponse {
  link: string;
}
/**
 * This interface was referenced by `Schema`'s JSON-Schema
 * via the `definition` "Player".
 */
export interface Player {
  connected: boolean;
  name?: string;
  score: number;
  win_count: number;
  user_id?: string;
  crowned?: boolean;
  skip_count: number;
}
/**
 * This interface was referenced by `Schema`'s JSON-Schema
 * via the `definition` "AchievementProgress".
 */
export interface AchievementProgress {
  achievement_id: string;
  user_id: UserId;
  user_index: number;
  progress: number;
  type: "achievement_progress";
}
/**
 * This interface was referenced by `Schema`'s JSON-Schema
 * via the `definition` "AchievementUnlock".
 */
export interface AchievementUnlock {
  id: string;
  image_url: null | string;
  name: string;
  description: string;
  user_index: number;
  max_progress: number;
  user_id: string;
  type: "achievement_unlock";
}
/**
 * This interface was referenced by `Schema`'s JSON-Schema
 * via the `definition` "ReportStats".
 */
export interface ReportStats {
  user_id: UserId;
  rolls: number;
  wins: number;
  games: number;
  doubles: number;
}
/**
 * This interface was referenced by `Schema`'s JSON-Schema
 * via the `definition` "ServerPlayer".
 */
export interface ServerPlayer {
  session: string;
  turn_count: number;
  roll_count: number;
  doubles_count: number;
  connected: boolean;
  name?: string;
  score: number;
  win_count: number;
  user_id?: string;
  crowned?: boolean;
  skip_count: number;
}
/**
 * This interface was referenced by `Schema`'s JSON-Schema
 * via the `definition` "UserStats".
 */
export interface UserStats {
  rolls: number;
  doubles: number;
  games: number;
  wins: number;
}
/**
 * This interface was referenced by `Schema`'s JSON-Schema
 * via the `definition` "Achievement".
 */
export interface Achievement {
  id: string;
  progress: number;
  unlocked: string;
  rn: null | number;
  rd: null | number;
}
/**
 * This interface was referenced by `Schema`'s JSON-Schema
 * via the `definition` "AchievementData".
 */
export interface AchievementData {
  description: string;
  image_url: null | string;
  id: string;
  name: string;
  max_progress: number;
}
/**
 * This interface was referenced by `Schema`'s JSON-Schema
 * via the `definition` "DieRoll".
 */
export interface DieRoll {
  used: boolean;
  value: number;
}
/**
 * This interface was referenced by `Schema`'s JSON-Schema
 * via the `definition` "GameError".
 */
export interface GameError {
  type: "error";
  error: string;
}
/**
 * This interface was referenced by `Schema`'s JSON-Schema
 * via the `definition` "Redirect".
 */
export interface Redirect {
  type: "redirect";
  room: string;
}
/**
 * This interface was referenced by `Schema`'s JSON-Schema
 * via the `definition` "Room".
 */
export interface Room {
  code: string;
  host_name: string;
  last_updated: string;
  player_count: number;
}
/**
 * This interface was referenced by `Schema`'s JSON-Schema
 * via the `definition` "IGameState".
 */
export interface IGameState {
  players: Player[];
  chatLog: string[];
  turn_index: number;
  rolls: number[];
  used: boolean[];
  rolled: boolean;
  victory: boolean;
  privateSession: boolean;
  spectators: number;
}
/**
 * This interface was referenced by `Schema`'s JSON-Schema
 * via the `definition` "GameState".
 */
export interface GameState {
  type: "game_state";
  players: ServerPlayer[];
  chatLog: string[];
  turn_index: number;
  rolls: number[];
  used: boolean[];
  rolled: boolean;
  victory: boolean;
  privateSession: boolean;
  spectators: number;
}
/**
 * This interface was referenced by `Schema`'s JSON-Schema
 * via the `definition` "RoomListMsg".
 */
export interface RoomListMsg {
  type?: "room_list";
  rooms: Room[];
}
/**
 * This interface was referenced by `Schema`'s JSON-Schema
 * via the `definition` "RefetchPlayerMsg".
 */
export interface RefetchPlayerMsg {
  type: "refetch_player";
  user_id: string;
}
/**
 * This interface was referenced by `Schema`'s JSON-Schema
 * via the `definition` "WelcomeMsg".
 */
export interface WelcomeMsg {
  type: "welcome";
  id: number;
  players: Player[];
  chatLog: string[];
  turn_index: number;
  rolls: number[];
  used: boolean[];
  rolled: boolean;
  victory: boolean;
  privateSession: boolean;
  spectators: number;
}
/**
 * This interface was referenced by `Schema`'s JSON-Schema
 * via the `definition` "RestartMsg".
 */
export interface RestartMsg {
  type: "restart";
  id: number;
}
/**
 * This interface was referenced by `Schema`'s JSON-Schema
 * via the `definition` "SpectatorsMsg".
 */
export interface SpectatorsMsg {
  type: "spectators";
  count: number;
}
/**
 * This interface was referenced by `Schema`'s JSON-Schema
 * via the `definition` "WinMsg".
 */
export interface WinMsg {
  type: "win";
  id: number;
}
/**
 * This interface was referenced by `Schema`'s JSON-Schema
 * via the `definition` "RollMsg".
 */
export interface RollMsg {
  type: "roll";
  rolls: number[];
}
/**
 * This interface was referenced by `Schema`'s JSON-Schema
 * via the `definition` "RollAgainMsg".
 */
export interface RollAgainMsg {
  type: "roll_again";
}
/**
 * This interface was referenced by `Schema`'s JSON-Schema
 * via the `definition` "JoinMsg".
 */
export interface JoinMsg {
  type: "join";
  id: number;
  name?: string;
  user_id?: string;
}
/**
 * This interface was referenced by `Schema`'s JSON-Schema
 * via the `definition` "DisconnectMsg".
 */
export interface DisconnectMsg {
  type: "disconnect";
  id: number;
}
/**
 * This interface was referenced by `Schema`'s JSON-Schema
 * via the `definition` "ReconnectMsg".
 */
export interface ReconnectMsg {
  type: "reconnect";
  id: number;
  name?: string;
  user_id?: string;
}
/**
 * This interface was referenced by `Schema`'s JSON-Schema
 * via the `definition` "KickMsg".
 */
export interface KickMsg {
  type: "kick";
  id: number;
}
/**
 * This interface was referenced by `Schema`'s JSON-Schema
 * via the `definition` "ChatMsg".
 */
export interface ChatMsg {
  type: "chat";
  msg: string;
}
/**
 * This interface was referenced by `Schema`'s JSON-Schema
 * via the `definition` "UpdateTurnMsg".
 */
export interface UpdateTurnMsg {
  type: "update_turn";
  id: number;
  skip?: boolean;
}
/**
 * This interface was referenced by `Schema`'s JSON-Schema
 * via the `definition` "UpdateNameMsg".
 */
export interface UpdateNameMsg {
  type: "update_name";
  name: string;
  id: number;
}
/**
 * This interface was referenced by `Schema`'s JSON-Schema
 * via the `definition` "UpdateMsg".
 */
export interface UpdateMsg {
  type: "update";
  id: number;
  score: number;
  used?: boolean[];
  reset?: boolean;
}
